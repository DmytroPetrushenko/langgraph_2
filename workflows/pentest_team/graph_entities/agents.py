from typing import List, Optional

from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

import utils

from utils import orm_util as orm
from workflows.pentest_team.graph_entities.statets import SubgraphState


def assistant_agent_with_tools(model_llm, tools, system_message: str):
    """
    Create an agent with specified tools and a system message.

    Args:
        model_llm: The agent model to bind tools with.
        tools: A list of tools to integrate into the agent.
        system_message: A specialized system message to customize the agent's behavior.

    Returns:
        A configured prompt bound with the model and tools.
    """
    # Ensure tools is a valid list
    if not tools or not isinstance(tools, list):
        raise ValueError("Invalid tools input. Must be a non-empty list of tools.")

    # Load the default template message for the system
    default_with_tool = utils.orm_util.create_message_from_file('default_with_tool.txt')

    # Define the prompt template using the system message and placeholder for dynamic messages
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", default_with_tool),
            (MessagesPlaceholder(variable_name="messages"))
        ]
    )

    # Partially specialize the prompt with the provided system message
    prompt = prompt.partial(system_message=system_message)

    # Add tool names to the prompt by joining their names into a string
    tool_names = ", ".join(tool.name for tool in tools)
    if not tool_names:
        raise ValueError("Tool names are missing or empty.")

    prompt = prompt.partial(tool_names=tool_names)

    # Bind the tools to the model and return the configured prompt
    return prompt | model_llm.bind_tools(tools)


def host_agent_without_tools(model_llm, system_message: str, teams: Optional[List[str]] = None):
    """
    Create an agent without tools, customized with a system message.

    Args:
        model_llm: The agent model to configure.
        system_message: A system message that adds specific instructions or context to the agent.
        teams: An optional list of team names that will be passed to the agent.

    Returns:
        A prompt configured with the model and system message.
    """
    # Load the default template message for agents without tools
    default_without_tools = orm.create_message_from_file('default_without_tools.txt')

    # Validate system_message input
    if not system_message or not isinstance(system_message, str):
        raise ValueError("Invalid system message. It must be a non-empty string.")

    # Validate teams input only if teams are provided
    if teams is not None and (not isinstance(teams, list) or not all(isinstance(team, str) for team in teams)):
        raise ValueError("Invalid teams list. It must be a list of strings.")

    # Define the prompt template with system message and placeholder for dynamic messages
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", default_without_tools),
            (MessagesPlaceholder(variable_name="messages"))
        ]
    )

    # Add specialization to the current agent using the system message and teams (if provided)
    if teams:
        prompt = prompt.partial(system_message=system_message, teams=teams)
    else:
        prompt = prompt.partial(system_message=system_message)

    # Bind the prompt to the model and return it
    return prompt | model_llm

