import operator

from langchain_core.messages import BaseMessage
from pydantic.v1 import BaseModel, Field
from typing import Sequence, Annotated


# Define the state used in the planning node
class SubgraphState(BaseModel):
    """
    Represents the state used in the planning process.

    Attributes:
        messages: A sequence of messages exchanged during the planning phase. 
                  The `operator.add` annotation ensures messages are accumulated.
        sender: The identifier for the sender of the messages. 
                This could be the agent or node that initiated the communication.
    """
    messages: Annotated[Sequence[BaseMessage], operator.add]
    sender: str | None  # Optional field, sender can be None if not provided
    plan: str | None = Field(description="for a security testing plan")


# Define the unified state used across various nodes, including the team lead node
class UnifiedState(BaseModel):
    """
    Represents the unified state for the entire workflow, 
    especially focusing on the team lead node.

    Attributes:
        messages: A sequence of messages exchanged at the team lead node.
                  Like in PlanningState, messages are accumulated using `operator.add`.
        sender: The identifier for the sender of the messages at the team lead node.
                This field is required in UnifiedState.
    """
    # team lead node states
    messages: Annotated[Sequence[BaseMessage], operator.add]
    sender: str  # Required field, sender must always be defined
    plan: str | None = Field(description="for a security testing plan")
